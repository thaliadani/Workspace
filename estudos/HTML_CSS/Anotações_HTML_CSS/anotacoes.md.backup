# HTML e CSS: ambientes de desenvolvimento, estrutura de arquivos e tags

## A importância da documentação

### **O que é:**

### A documentação é um guia que toda pessoa desenvolvedora deve levar a sério no dia a dia, é através dela que aprendemos como funcionam as linguagens de programação e também ferramentas e bibliotecas no mundo da tecnologia.

### **Sua importância:**

### A documentação é muito importante no aprendizado e no desenvolvimento de aplicações. Afinal quem melhor que a pessoa que criou a ferramenta para nos orientar sobre as suas funcionalidades não é mesmo?

### **Quando devemos utilizar:**

### Devemos ler a documentação sempre que precisamos saber a estrutura de um método, ou quando queremos saber algum comando ou recurso de uma biblioteca, ou até mesmo quando esquecemos certa funcionalidade e precisamos relembrar.

### **Outra forma de ajuda:**

### Existem também as comunidades de tecnologia e programação que são bem úteis para tirarmos nossas dúvidas e aprendermos mais, como por exemplo a Stackoverflow que é uma das maiores comunidades de ajuda sobre programação e tecnologia atualmente, é uma comunidade onde você vai encontrar dúvidas sobre quase todas as linguagens de programação entre outras ferramentas, super recomendável acessá-la.

### A w3schools também é uma ótima opção para quem precisa aprender algum método novo ou consultar exemplos sobre determinada linguagem, é um site bem completo e de fácil compreensão.

## A estrutura básica do HTML

### Para criar um arquivo HTML funcional devemos seguir um padrão de construção, utilizando um conjunto de elementos, ou seja, os hipertextos, que se conectam entre si formando a página. Como já visto anteriormente, os elementos HTML ou também chamados de tags HTML, são utilizados para informar ao navegador que tipo de estrutura é essa que está sendo construída, podendo ser títulos, parágrafos, imagens, links, entre outros.

### Um exemplo prático dessa estrutura básica seria:

	<!DOCTYPE html>
	<html lang="pt-br">
	<head>
	    <meta charset="UTF-8">
	    <meta http-equiv="X-UA-Compatible" content="IE=edge">
	    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	    <title>Document</title>
	</head>
	<body>
	
	</body>
	</html>

## Tags semânticas

### Quando começamos um arquivo HTML, há uma estrutura padrão que é usada em qualquer projeto. É importante saber quais são as tags que precisam ser implementadas e entender suas funções dentro do código. Para facilitar esse processo, utilizamos as tags semânticas, que são tags descritivas sobre o conteúdo que armazenam, como é o caso das tags header, main e footer, que conhecemos nessa aula. Elas servem tanto para otimizar a leitura pelos navegadores, como pelas pessoas desenvolvedoras que vão fazer a manutenção do código.

### Para aprender mais sobre as tags que fazem parte da base de um arquivo HTML, você pode ler a documentação MDN “Semântica” e conhecer outros elementos semânticos disponíveis para tornar o seu código mais claro, seja para outras pessoas programadoras, para navegadores ou mecanismos de buscas.

## Escolhendo as cores do projeto

### **Coolors**

### O Coolors possui uma interface bem clara. Com a barra de espaço do seu teclado, você consegue criar várias combinações, e uma das funções mais legais é a opção travar, que você pode usar se gostar de apenas uma cor, e assim que você clica nela, consegue continuar elaborando outras combinações levando em conta a cor que você escolheu.

### **Adobe Color**

### O Adobe color apresenta um Color Wheel (roda de cores) que pode ser ajustado de maneiras variadas para obter uma harmonia de cores, e você pode aplicar diversas regras de harmonia de cores, como o modo análogo, monocromático, tríade, complementar, quadrado, composto, entre outros.

### **Color Hunt**

### O Color Hunt dispõe de diversas paletas elaboradas. Você consegue encontrar a combinação que mais te agrada e consegue buscar por palavras-chave como pastel, vintage, neon e assim por diante. E caso não encontre nenhuma que te agrade, você consegue criar a sua própria paleta clicando nos três pontinhos do canto superior direito da página.

### **Color Tool - Material Design**

### O Color Tool é ótimo para criar, compartilhar e aplicar paletas de cores à interface do usuário, bem como é possível medir o nível de acessibilidade de qualquer combinação de cores na aba accessibility.

## Destacando o texto

### Pode destacar o texto utilizando a tag <strong>, porém existe outra tag que também é muito utilizada para isso que é a tag <span>, diferente da strong a span não deixa em negrito por padrão mas é uma ótima forma de marcar trechos do texto em HTML. Veja:

### HTML:
		
	<h1>Formação de <span>Front-end</span></h1>

### CSS:
	
	p{
	            font-weight: bold;
	}
	
	span{
	            color: #22D4FD;
	            border: 1px solid #22D4FD;
	            padding: 10px;
	}

### Explicando o código acima:

- ### font-weight: bold; (Texto em negrito)

- ### color: #22D4FD; (Cor do texto azul)

- ### border: 1px solid #22D4FD; (Borda com 1 px de largura, do tipo sólida e cor da borda azul)

- ### padding: 10px; (Espaçamento interno de 10px)

### RESULTADO:

![Imagem](https://caelum-online-public.s3.amazonaws.com/2808-html-css-ambiente-arquivos-tags/aula5-img5.png)

## Class

### O atributo class permite ao CSS selecionar e acessar elementos específicos através dos seletores de classe, mas para entender de forma mais clara e objetiva, você pode acessar a documentação oficial [MDN](https://developer.mozilla.org/pt-BR/docs/Web/HTML/Global_attributes/class "MDN") para tirar dúvidas.

### **Nomes de classes no CSS**

### Quer entender as boas práticas para dar um nome nas classes do CSS? Recomendamos a leitura do artigo [Nomes de classes no CSS](https://www.alura.com.br/artigos/nomes-de-classes-no-css "Nomes de classes no CSS"), que aborda de forma simples e prática desse conceito.

## Seletores

### A documentação [MDN](https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Selectors "MDN") para se aprofundar ainda mais no assunto.

### **Reset CSS**

### [O que é reset css](https://www.alura.com.br/artigos/o-que-e-reset-css "Artigo")

## O que é Viewport?

### Em computação gráfica, a viewport é a porção de área visível de um plano e é utilizada como unidade de medida no CSS para criar páginas Web 100% responsivas. Em outras palavras, a viewport varia de dispositivo para dispositivo, por exemplo em computadores, tablets e celulares, cada tela possui dimensões diferentes e enquanto uma página não responsiva apresentaria os elementos desproporcionais, uma página responsiva utilizando viewport teria seus elementos adequados a cada proporção.

### [Guia de unidades no css](https://www.alura.com.br/artigos/guia-de-unidades-no-css "Guia")

## Guia completo do Flexbox

### [Guia do flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/ "Guia do flexbox")

## Uma boa prática ao escrever seu código

### Indentação é o espaçamento aplicado no início das linhas de código que ajuda a manter uma hierarquia visual. Em algumas linguagens esse não é um elemento que impede o código de ser compilado, mas manter o código indentado é fundamental para facilitar sua leitura, principalmente para terceiros.

### Para ilustrar melhor, abaixo estão dois exemplos:

### Código não indentado

	<main>
	<div class=”titulos”>
	<h1>Título da página</h1>
	</div>
	<div class=”paragrafos”>
	<p>Primeiro parágrafo</p>
	<p>Segundo parágrafo</p>
	</div>
	</main>

### Código indentado

	<main>
		<div class=”titulos”>
			<h1>Título da página</h1>
		</div>
		<div class=”paragrafos”>
			<p>Primeiro parágrafo</p>
			<p>Segundo parágrafo</p>
		</div>
	</main>


## Google Fonts

### [Google Fonts](https://fonts.google.com/ "Google Fonts") é uma biblioteca da Google com mais de 1000 fontes livres licenciadas. Além de um diretório web interativo para navegar na biblioteca, existem atalhos para usar convenientemente as fontes através do CSS.

## Quando utilizar div

### A tag div define uma divisão em um documento HTML e costuma ser usada como um contêiner para outros elementos, o que ajuda na estilização do bloco. Por esse motivo, a div é frequentemente utilizada quando precisamos agrupar elementos sem usar as tags semânticas do HTML. Isso acontece porque a div não tem valor semântico. Portanto, não significa nada para os navegadores e mecanismos de pesquisa.

### Além do mais, por ser muito utilizada para agrupar elementos, acaba facilitando na organização das informações nos layouts. Dessa forma, pode ser formatada e manipulada organicamente via CSS. Geralmente vem acompanhado de atributos de ID e classe para facilitar essa organização e formatação.

## CSS Border

### A propriedade border é responsável pelas bordas dos elementos HTML. Ao inserir um elemento em um documento HTML, há várias possibilidades de estilizar sua borda. Você pode utilizar estilos que a propriedade já possui, além de poder também alterar sua cor, espessura e até mesmo seu formato! Utilizando apenas o poder do CSS!

## Gap

### A propriedade gap não é exclusiva do Flexbox, porém é utilizada quase sempre em conjunto com ele. Ela especifica no CSS o tamanho dos espaços entre linhas e colunas em layouts de grid, flex e multi-column. Sua sintaxe é bem simples e ela aceita um ou dois valores.

### Para entender mais dessa propriedade em específico, recomendamos a leitura do artigo gap, presente no CSS-Tricks.

## border e comentário nos códigos

### Essa propriedade pode ser usada para definir os valores de largura da borda, estilo da borda e cor da borda e possui alguns estilos diferentes, como o “dotted”.

### **O que são comentários?**

### Comentários são notas de texto que podem ser inseridas ao longo do desenvolvimento e que serão ignoradas pelo código, portanto não interferem em seu funcionamento.

### **Para que servem os comentários**

### Os comentários podem ser usados para anotar informações importantes sobre o código, para salvar códigos que estivermos testando sem que haja necessidade de apagar e reescrever, para descrever alguma função específica e facilitar manutenções futuras ou até para auxiliar na organização das ideias de construção do código.

### **Como comentar em HTML e CSS**

### O uso de comentários é comum em diversas linguagens e cada uma terá sua sintaxe particular. Isso também acontece em HTML e CSS, já que em cada uma temos uma maneira de adicionar comentários, que vamos conhecer a seguir:

### **HTML**

### Os comentários no HTML se assemelham com uma abertura de tag. Tudo que estiver entre esses dois marcadores será considerado como comentário, inclusive quebras de linha:

	<p> Isso é um parágrafo de texto e será exibido pelo navegador </p>
	
	<!-- Isso é um comentário e será ignorado  -->
	
	<!-- Isso é um comentário com quebra de linha
	
	e também será ignorado  -->
	
	<p> Isso é um parágrafo de texto e será exibido pelo navegador </p>

### **CSS**

### Os comentários em CSS também possuem abertura e fechamento. Abrimos esse tipo de comentário com /* e fechamos com */ e assim como no HTML, tudo que estiver entre essas marcações será considerado comentário, ainda que esteja entre mais de uma linha:

	body{
	    background-color: white; 
	    /* Isso é um comentário em CSS */
	    /* 
	        Isso é um comentário em CSS com
	        quebra de linha
	    */
	}

### **Boas práticas ao comentar**

### Os comentários podem ser muito úteis para facilitar o desenvolvimento, no entanto, precisamos ter atenção a algumas boas práticas para fazer seu uso adequado:

### - Evite adicionar muitos comentários para não gerar uma “bagunça” em seu código;

### - Evite criar comentários muito longos. Tenha em mente que apesar de não serem executados, esses comentários ocupam espaço e podem deixar seu arquivo mais pesado;

### - Use os comentários a seu favor, ou seja, anote informações essenciais neles, pois isso irá facilitar com que você encontre aquilo que é realmente necessário lembrar no momento de fazer manutenções em seu código;

### - Ao usar comentários para testar sua aplicação, lembre-se de apagar essas notas quando terminar, para que seu código não fique desorganizado e com partes desnecessárias;

### - Por fim, lembre-se sempre que um código descritivo é mais duradouro que muitos comentários. Quando estiver trabalhando com HTML, lembre-se de usar as Tags semânticas e ao criar suas classes CSS, adicione nomes significativos. Assim, seu código ficará naturalmente descritivo e não dependerá tanto dos comentários, que podem ser apagados ou se perderem ao longo de manutenções =) .

## Hover

### O hover é usado para selecionar elementos quando você passa o mouse sobre eles. O único elemento que ele não estiliza são os links, que possuem seletores próprios.

## As variáveis no mundo da programação

### **Um armário cheio de gavetas!**

### Imagine que você trabalhe em uma sala de arquivos, que possui um armário muito grande e cheio de gavetas. Todos os dias, pessoas trazem seus objetos para que você guarde em uma gaveta para eles e para isso, te entregam uma etiqueta com um nome que será colado nessa gaveta que armazenará o objeto da pessoa.

### Ana te entregou uma caneta e uma etiqueta com o nome: canetaDaAna, e você guardou a caneta dela em uma gaveta, onde colou a etiqueta. Ela escolheu o nome canetaDaAna, mas poderia ser qualquer outro nome e seu conteúdo poderia ser qualquer um também, como um livro, por exemplo, e não uma caneta.

### Quando Ana precisar da caneta, ela irá te chamar e pedir pela canetaDaAna, e você a entregará o conteúdo da gaveta, ou seja, a caneta.

### **E como isso se relaciona com as variáveis?**

### Seu armário de gavetas no exemplo acima representa a memória do computador. Quando criamos uma variável, estamos solicitando ao computador que reserve uma “gavetinha” em sua memória para que guarde algo que precisaremos usar futuramente, e fazemos isso atribuindo um nome de variável que poderemos chamar a qualquer momento e que retornará o conteúdo que guardamos dentro dela. Esse nome pode ser um nome qualquer, no entanto sempre que solicitado ele trará como resposta aquilo que você armazenou nele.

### **O que são variáveis?**

### Variáveis são elementos que permitem que valores sejam manipulados ao longo da execução de seu código, através da definição de um nome para armazenar um valor que será usado repetidas vezes. Essa definição do nome e do conteúdo que será contido nele é o que nós chamamos de declaração.

### Esse valor pode ser alterado ao longo do código, por isso o nome “váriavel”.

### Observe o seguinte exemplo:

	:root{
	     --tamanho-da-fonte:  24px;
	}

### Criamos no :root, ou seja, no escopo global de um código, uma variável que foi declarada com o nome --tamanho-da-fonte e seu valor foi atribuído como 24px. Toda vez que chamarmos pelo nome --tamanho-da-fonte, iremos obter como retorno o valor 24px.

### Variáveis são utilizadas diariamente pelas pessoas desenvolvedoras para que consigam manipular e reutilizar valores em seu código e estão presentes nas mais diversas linguagens de programação, pois são elementos base ao criar qualquer código que tenha a mínima funcionalidade. Portanto, conforme você evoluir em seus conhecimentos no desenvolvimento é certo que irá lidar muito com variáveis.

### Para saber mais sobre as variáveis em CSS, você pode conferir a [documentação](https://developer.mozilla.org/pt-BR/docs/Web/CSS/Using_CSS_custom_properties "Using_CSS_custom_properties" ).

## A importância de utilizar as unidades de medidas relativas

### É muito importante utilizarmos as unidades de medidas relativas nos textos e títulos ou até mesmo nos elementos do nosso site, como por exemplo, as imagens.

### Essa medida ajuda as pessoas com baixa visão que precisam alterar a aparência do navegador ou aplicar mais zoom para aumentar o tamanho dos elementos.

### Lembrando que podemos diminuir o zoom da página também quando quisermos ter uma visão mais ampla dos elementos. Muito legal não é mesmo? :)

### Esse artigo da Alura sobre sobre unidades de medidas pode ajudar bastante o seu aprendizado: [Artigo sobre unidade de medidas ](https://www.alura.com.br/artigos/guia-de-unidades-no-css "Artigo sobre unidade de medidas" ).

### Você também pode ver a documentação sobre as [Unidades de medidas](https://www.w3schools.com/cssref/css_units.php "Unidades de medidas" ).

## Dev Tools - A melhor amiga de quem desenvolve

### A ferramenta de desenvolvimento (Dev Tool) ajuda muito no processo de criação e desenvolvimento de projetos web. Além de inspecionar os nossos códigos HTML e CSS, podemos fazer algumas alterações temporárias e ela nos mostra uma prévia de outros tamanhos de telas e dispositivos como tablets e celulares e isso ajuda muito na hora de criarmos a versão mobile e toda a parte responsiva.

![Imagem](https://caelum-online-public.s3.amazonaws.com/2884-html-css/aula2-img1.png)

### Gostou? :) Agora você pode tentar também!

### Para abrir o Dev Tools, quando estiver com o navegador aberto aperte as teclas CTRL + SHIFT + C no Chrome do Windows,ou COMMAND + OPTION + C no MAC ou você pode clicar com o botão direito do mouse na tela do navegador e clicar em inspecionar na lista suspensa ou inspect caso esteja em inglês. Veja:

### **Com o Dev Tools aberto você pode:**

### - Escolher o tipo de dispositivo (celular, tablet etc);

### - Inspecionar os elementos HTML;

### - Alterar o tamanho da tela;

### - Alterar os estilos CSS da página temporariamente;

### - Apertar as teclas CTRL + SHIFT + M para abrir a visualização responsiva.

![Imagem](https://caelum-online-public.s3.amazonaws.com/2884-html-css/aula2-img2.png)

## Media Querie

### Sabia que você pode ter mais de uma media querie em seu projeto? É possível definir um tamanho de tela para o celular outro para o tablet e deixar a “padrão” para o desktop.

### Exemplo:

### Podemos definir uma largura máxima de “480px” para o celular: @media (max-width: 480px), e em outra media querie definir uma largura máxima de “800px” para os tablets: @media (max-width: 800px), e então atribuímos os ajustes necessários dentro de cada media querie, dessa forma teremos nosso site 100% responsivo.

### Podemos também definir intervalos para os tamanhos de telas com um único Media querie, atribuímos o valor mínimo e depois o valor máximo separando ele pelo atributo and, veja: @media (min-width: 480px ) and (max-width: 800px), nesse caso os estilos serão aplicados em telas de no mínimo “480px” e de no máximo “800px”.

### Lembrando que a maioria dos acessos a internet hoje em dia é através dos dispositivos móveis, portanto, não se esqueça de sempre deixar os seus projetos e sites responsivos.

## O que é responsividade

### Já notou que quando acessamos alguns sites eles mudam o seu layout a depender do dispositivo? Por exemplo, se você acessar o site da Alura no computador, o layout será um pouco diferente do que se você acessá-lo pelo celular.

### **Mas, que ferramenta é responsável por isso?**

### A responsividade! Quando o site adapta o tamanho de suas páginas(Layout) de acordo com o tamanho da tela do dispositivo no qual ele está sendo acessado ou quando diminuímos o tamanho da janela do navegador (essa transformação pode ser feita também quando aplicamos um zoom na página), dizemos que este site é um site responsivo.

### A responsividade não só altera o tamanho das fontes e elementos, como suporta qualquer mudança como por exemplo: na cor de fundo, cor de texto, bordas, etc. Isso depende dos estilos aplicados dentro das medias queries no arquivo CSS.

### Se você atribuir uma cor de fundo diferente no body dentro da media query, a cor só vai alterar quando a tela atingir o tamanho definido por ela.

### Nesse exemplo foi aplicada a cor roxa no body dentro da media query utilizada no projeto para telas de no máximo 1200 pixels, veja que legal o resultado:

![Imagem](https://caelum-online-public.s3.amazonaws.com/2884-html-css/aula3-gif1.gif)

### Você pode aprender muito mais aqui na Alura sobre responsividade através desse ótimo curso sobre Layouts Responsivos, acesse o [link](https://cursos.alura.com.br/course/css-flexbox-layouts-responsivos "css-flexbox-layouts-responsivos" ).